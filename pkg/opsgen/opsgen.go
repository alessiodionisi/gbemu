package opsgen

import (
	"bytes"
	_ "embed"
	"encoding/json"
	"fmt"
	"html"
	"html/template"
	"io"
	"os"
	"strings"
)

//go:embed dmgops.json
var opsgenFileBytes []byte

type templateData struct {
	Name           string
	Template       string
	Code           string
	Parameter1     string
	Parameter2     string
	CyclesBranch   int
	CyclesNoBranch int
	Length         int
}

type opsgenFileOp struct {
	Name            string
	Group           string
	TCyclesBranch   int
	TCyclesNoBranch int
	Length          int
	Flags           struct {
		Z string
		N string
		H string
		C string
	}
}

type opsgenFile struct {
	Unprefixed []opsgenFileOp
	CBPrefixed []opsgenFileOp
}

type OpsGen struct {
	template *template.Template
}

func (o *OpsGen) executeOp(wr io.Writer, i int, op opsgenFileOp) (bool, error) {
	opNameParts := strings.Split(op.Name, " ")

	opName := strings.ToLower(opNameParts[0])
	opGroupAndName := fmt.Sprintf("%s/%s", op.Group, opName)

	tmplData := templateData{
		Name:           op.Name,
		Template:       opGroupAndName,
		Code:           fmt.Sprintf("%#04x", i),
		CyclesBranch:   op.TCyclesBranch,
		CyclesNoBranch: op.TCyclesNoBranch,
		Length:         op.Length,
	}

	switch opName {
	case "ld", "add", "sub", "cp", "and", "or", "xor", "adc", "sbc", "bit", "res", "set":
		opParameters := strings.Split(opNameParts[1], ",")

		tmplData.Parameter1 = opParameters[0]
		tmplData.Parameter2 = opParameters[1]

		if err := o.template.ExecuteTemplate(
			wr,
			opGroupAndName,
			tmplData,
		); err != nil {
			return false, err
		}

		return true, nil
	case "inc", "dec":
		tmplData.Parameter1 = opNameParts[1]

		if err := o.template.ExecuteTemplate(
			wr,
			opGroupAndName,
			tmplData,
		); err != nil {
			return false, err
		}

		return true, nil
	case "nop", "stop", "halt", "ei", "prefix", "cpl", "ccf", "unused":
		if err := o.template.ExecuteTemplate(
			wr,
			opGroupAndName,
			tmplData,
		); err != nil {
			return false, err
		}

		return true, nil
	}

	fmt.Printf("missing %s\n", opGroupAndName)

	return false, nil
}

func (o *OpsGen) Generate() error {
	var opsgenFile opsgenFile

	if err := json.Unmarshal(opsgenFileBytes, &opsgenFile); err != nil {
		return err
	}

	generatedOps := 0
	unprefixedOpsMap := ""
	prefixedOpsMap := ""

	var unprefixedOps, cbPrefixedOps bytes.Buffer

	for i, op := range opsgenFile.Unprefixed {
		generated, err := o.executeOp(&unprefixedOps, i, op)
		if err != nil {
			return err
		}

		if generated {
			unprefixedOpsMap = unprefixedOpsMap + fmt.Sprintf("	%#04x: op%#04x,\n", i, i)
			generatedOps++
		}
	}

	for i, op := range opsgenFile.CBPrefixed {
		cbPrefixed := i + 51968

		generated, err := o.executeOp(&cbPrefixedOps, cbPrefixed, op)
		if err != nil {
			return err
		}

		if generated {
			prefixedOpsMap = prefixedOpsMap + fmt.Sprintf("	%#04x: op%#04x,\n", cbPrefixed, cbPrefixed)
			generatedOps++
		}
	}

	fmt.Printf("generated %d/%d ops\n", generatedOps, len(opsgenFile.Unprefixed)+len(opsgenFile.CBPrefixed))

	opsFile, err := os.Create("pkg/gameboy/cpu/ops.go")
	if err != nil {
		return err
	}
	defer opsFile.Close()

	_, err = opsFile.WriteString(`// Code generated by opsgen. DO NOT EDIT.

package cpu

import (
	"github.com/adnsio/gbemu/pkg/gameboy/cpu/register"
)

`)
	if err != nil {
		return err
	}

	_, err = opsFile.WriteString(fmt.Sprintf(`var opUnprefixedMap map[uint16]func (c *CPU) (int, int) = map[uint16]func(c *CPU) (int, int){
%s}

`, unprefixedOpsMap))
	if err != nil {
		return err
	}

	_, err = opsFile.WriteString(fmt.Sprintf(`var opPrefixedMap map[uint16]func (c *CPU) (int, int) = map[uint16]func(c *CPU) (int, int){
%s}

`, prefixedOpsMap))
	if err != nil {
		return err
	}

	_, err = opsFile.WriteString(html.UnescapeString(unprefixedOps.String()))
	if err != nil {
		return err
	}

	_, err = opsFile.WriteString(html.UnescapeString(cbPrefixedOps.String()))
	if err != nil {
		return err
	}

	return nil
}

func New() (*OpsGen, error) {
	comments := `// op{{.Code}} executes {{.Name}} (template {{.Template}})`

	controlMiscNopTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	controlMiscStopTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	// TODO
	// c.ime = 0

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	controlMiscEiTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	// TODO
	// c.imeScheduled = 0

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	controlMiscPrefixTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	c.prefix = true

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8LsmLdTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	{{- if eq .Parameter1 "(HL+)" "(HL-)"}}
	{{Get8 .Parameter2 | Set8 "(HL)"}}
	{{- else if eq .Parameter2 "(HL+)" "(HL-)"}}
	{{Get8 "(HL)" | Set8 .Parameter1}}
	{{- else}}
	{{Get8 .Parameter2 | Set8 .Parameter1}}
	{{- end}}
	
	{{- if or (eq .Parameter1 "(HL+)") (eq .Parameter2 "(HL+)")}}
	{{Get8 "HL" | printf "%s + 1" | Set8 "HL"}}
	{{- else if or (eq .Parameter1 "(HL-)") (eq .Parameter2 "(HL-)")}}
	{{Get8 "HL" | printf "%s - 1" | Set8 "HL"}}
	{{- end}}

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x16LsmLdTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	{{Get16 .Parameter2 | Set16 .Parameter1}}

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x16AluLdTemplate := comments + `
{{- if eq .Parameter2 "SP+i8"}}
func op{{.Code}}(c *CPU) (int, int) {
	sourceValue1 := {{Get16 "SP"}}
	sourceValue2 := {{Get16 "i8"}}
	value := sourceValue1 + sourceValue2
	carryBits := sourceValue1 ^ sourceValue2 ^ value

	{{Set16 .Parameter1 "value"}}

	c.UnsetFlagZ()
	c.UnsetFlagN()
	c.SetFlagH16Bit(carryBits)
	c.SetFlagC16Bit(carryBits)

	return {{.Length}}, {{.CyclesNoBranch}}
}
{{- end}}

`

	x16AluIncTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	{{Get16 .Parameter1 | printf "%s + 1" | Set16 .Parameter1}}

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluIncTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get8 .Parameter1}}
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x16AluDecTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	{{Get16 .Parameter1 | printf "%s - 1" | Set16 .Parameter1}}

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluDecTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get8 .Parameter1}}
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluAddTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get8 .Parameter1}}
	sourceValue := {{Get8 .Parameter2}}
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x16AluAddTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get16 .Parameter1}}
	sourceValue := {{Get16 .Parameter2}}
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	{{Set16 .Parameter1 "value"}}

	{{if eq .Parameter1 "SP" -}}
	c.UnsetFlagZ()
	{{end -}}
	c.UnsetFlagN()
	c.SetFlagH16Bit(carryBits)
	c.SetFlagC16Bit(carryBits)

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluSubTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get8 .Parameter1}}
	sourceValue := {{Get8 .Parameter2}}
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluCpTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get8 .Parameter1}}
	sourceValue := {{Get8 .Parameter2}}
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluAndTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get8 .Parameter1}}
	sourceValue := {{Get8 .Parameter2}}
	value := destValue & sourceValue

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluOrTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get8 .Parameter1}}
	sourceValue := {{Get8 .Parameter2}}
	value := destValue | sourceValue

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluXorTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	destValue := {{Get8 .Parameter1}}
	sourceValue := {{Get8 .Parameter2}}
	value := destValue ^ sourceValue

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluAdcTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := {{Get8 .Parameter1}}
	sourceValue := {{Get8 .Parameter2}}
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluSbcTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := {{Get8 .Parameter1}}
	sourceValue := {{Get8 .Parameter2}}
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	{{Set8 .Parameter1 "value"}}

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluCplTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	value := ^{{Get8 "A"}}

	{{Set8 "A" "value"}}

	c.SetFlagN()
	c.SetFlagH()

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8AluCcfTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	c.SetFlagN()
	c.SetFlagH()
	if c.GetFlagC() {
		c.UnsetFlagC()
	} else {
		c.SetFlagC()
	}

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8RsbBitTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	sourceValue := {{Get8 .Parameter2}}
	value := (sourceValue >> {{.Parameter1}}) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8RsbResTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	sourceValue := {{Get8 .Parameter2}}
	value := sourceValue & ^(uint8(1) << {{.Parameter1}})

	{{Set8 .Parameter2 "value"}}

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	x8RsbSetTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	sourceValue := {{Get8 .Parameter2}}
	value := sourceValue | uint8(1) << {{.Parameter1}}

	{{Set8 .Parameter2 "value"}}

	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	unusedTemplate := comments + `
func op{{.Code}}(c *CPU) (int, int) {
	return {{.Length}}, {{.CyclesNoBranch}}
}

`

	tmpl := template.New("")

	tmpl = tmpl.Funcs(template.FuncMap{
		"Set8": func(parameter string, value string) string {
			switch parameter {
			case "A":
				return fmt.Sprintf("c.SetRegister8Bit(register.A, %s)", value)
			case "B":
				return fmt.Sprintf("c.SetRegister8Bit(register.B, %s)", value)
			case "C":
				return fmt.Sprintf("c.SetRegister8Bit(register.C, %s)", value)
			case "D":
				return fmt.Sprintf("c.SetRegister8Bit(register.D, %s)", value)
			case "E":
				return fmt.Sprintf("c.SetRegister8Bit(register.E, %s)", value)
			case "H":
				return fmt.Sprintf("c.SetRegister8Bit(register.H, %s)", value)
			case "L":
				return fmt.Sprintf("c.SetRegister8Bit(register.L, %s)", value)
			case "(BC)":
				return fmt.Sprintf("c.SetMemory8Bit(c.GetRegister16Bit(register.BC), %s)", value)
			case "(DE)":
				return fmt.Sprintf("c.SetMemory8Bit(c.GetRegister16Bit(register.DE), %s)", value)
			case "(HL)":
				return fmt.Sprintf("c.SetMemory8Bit(c.GetRegister16Bit(register.HL), %s)", value)
			case "(u16)":
				return fmt.Sprintf("c.SetMemory8Bit(c.Fetch16Bit(), %s)", value)
			}
			return fmt.Sprintf("// TODO: set for %s", parameter)
		},
		"Set16": func(parameter string, value string) string {
			switch parameter {
			case "AF":
				return fmt.Sprintf("c.SetRegister16Bit(register.AF, %s)", value)
			case "BC":
				return fmt.Sprintf("c.SetRegister16Bit(register.BC, %s)", value)
			case "DE":
				return fmt.Sprintf("c.SetRegister16Bit(register.DE, %s)", value)
			case "HL":
				return fmt.Sprintf("c.SetRegister16Bit(register.HL, %s)", value)
			case "SP":
				return fmt.Sprintf("c.SetRegister16Bit(register.SP, %s)", value)
			}
			return fmt.Sprintf("// TODO: set for %s", parameter)
		},
		"Get8": func(parameter string) string {
			switch parameter {
			case "A":
				return "c.GetRegister8Bit(register.A)"
			case "B":
				return "c.GetRegister8Bit(register.B)"
			case "C":
				return "c.GetRegister8Bit(register.C)"
			case "D":
				return "c.GetRegister8Bit(register.D)"
			case "E":
				return "c.GetRegister8Bit(register.E)"
			case "H":
				return "c.GetRegister8Bit(register.H)"
			case "L":
				return "c.GetRegister8Bit(register.L)"
			case "i8":
				return "int8(c.Fetch8Bit())"
			case "u8":
				return "c.Fetch8Bit()"
			case "(BC)":
				return "c.GetMemory8Bit(c.GetRegister16Bit(register.BC))"
			case "(DE)":
				return "c.GetMemory8Bit(c.GetRegister16Bit(register.DE))"
			case "(HL)":
				return "c.GetMemory8Bit(c.GetRegister16Bit(register.HL))"
			case "(u16)":
				return "c.GetMemory8Bit(c.Fetch16Bit())"
			case "(FF00+u8)":
				return "c.GetMemory8Bit(0xff00 + uint16(c.Fetch8Bit()))"
			case "(FF00+C)":
				return "c.GetMemory8Bit(0xff00 + uint16(c.GetRegister8Bit(register.C)))"
			}
			return fmt.Sprintf("// TODO: get for %s", parameter)
		},
		"Get16": func(parameter string) string {
			switch parameter {
			case "AF":
				return "c.GetRegister16Bit(register.AF)"
			case "BC":
				return "c.GetRegister16Bit(register.BC)"
			case "DE":
				return "c.GetRegister16Bit(register.DE)"
			case "HL":
				return "c.GetRegister16Bit(register.HL)"
			case "SP":
				return "c.GetRegister16Bit(register.SP)"
			case "i8":
				return "uint16(int8(c.Fetch8Bit()))"
			case "u16":
				return "c.Fetch16Bit()"
			}
			return fmt.Sprintf("// TODO: get for %s", parameter)
		},
	})

	tmpl, err := tmpl.New("x8/lsm/ld").Parse(x8LsmLdTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x16/lsm/ld").Parse(x16LsmLdTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x16/alu/ld").Parse(x16AluLdTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x16/alu/inc").Parse(x16AluIncTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/inc").Parse(x8AluIncTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x16/alu/dec").Parse(x16AluDecTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/dec").Parse(x8AluDecTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("control/misc/nop").Parse(controlMiscNopTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("control/misc/stop").Parse(controlMiscStopTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("control/misc/halt").Parse(controlMiscStopTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("control/misc/ei").Parse(controlMiscEiTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("control/misc/di").Parse(controlMiscStopTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("control/misc/prefix").Parse(controlMiscPrefixTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/add").Parse(x8AluAddTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x16/alu/add").Parse(x16AluAddTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/sub").Parse(x8AluSubTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/cp").Parse(x8AluCpTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/and").Parse(x8AluAndTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/or").Parse(x8AluOrTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/xor").Parse(x8AluXorTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/adc").Parse(x8AluAdcTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/sbc").Parse(x8AluSbcTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/cpl").Parse(x8AluCplTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/alu/ccf").Parse(x8AluCcfTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/rsb/bit").Parse(x8RsbBitTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/rsb/res").Parse(x8RsbResTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("x8/rsb/set").Parse(x8RsbSetTemplate)
	if err != nil {
		return nil, err
	}

	tmpl, err = tmpl.New("unused/unused").Parse(unusedTemplate)
	if err != nil {
		return nil, err
	}

	fmt.Println(tmpl.DefinedTemplates())

	return &OpsGen{
		template: tmpl,
	}, nil
}
